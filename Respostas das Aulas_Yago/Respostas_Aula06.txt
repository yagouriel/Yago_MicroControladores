Para cada questão, escreva funções em C e/ou sub-rotinas na linguagem Assembly do MSP430. Reaproveite funções e sub-rotinas de uma questão em outra, se assim desejar. Leve em consideração que as sub-rotinas são utilizadas em um código maior, portanto utilize adequadamente os registradores R4 a R11. As instruções da linguagem Assembly do MSP430 se encontram ao final deste texto.

1. (a) Escreva uma função em C que calcule a raiz quadrada 'x' de uma variável 'S' do tipo float, utilizando o seguinte algoritmo: após 'n+1' iterações, a raiz quadrada de 'S' é dada por

	x(n+1) = (x(n) + S/x(n))/2

O protótipo da função é:
Resposta:
   unsigned int Raiz_Quadrada(unsigned int S){
        unsigned int interacoes = 15;
        float x0 = S/2;
        float x;
        int n;
        for(n = 0; n <= interacoes; n++){
            x = (x0 + (S/x0))/2;
            x0 = x;
        }
	return (unsiged int)x;
    }

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. A variável 'S' é fornecida pelo registrador R15, e a raiz quadrada de 'S' (ou seja, a variável 'x') é fornecida pelo registrador R15 também.
x0 = R13
S = R15
CalculaRaiz: add.w #1,R11    ; calcula div R15/R13 e guarda em R15 --> (R15 = R15/R13)
	     mov.w #0,R12    ; registrador que guarda o "resultado" primário para divisao  		
             mov.w R15,R14   ; copia R15(numerador) para R14(registrador temporario). 
	     jz fimDiv	     ; se o numerador for Zero, a divisão termina
looping:     sub.w R13,R14;  ; R14 = R14-R13
             jn fimDiv	     ; se o valor de SUB R13,R14 for negativo então a divisão termina.
	     cmp.w R14,R15   ; se a divisão for por zero, essa comparação permite terminar a div.
	     jz fimDiv       ; should never happen.
	     add.w #1,R12    ; vai adicionando um valor ao resultado até o resultado final.
	     jmp looping     ; looping para somar repetidas vezes até R12 ser Zero.
fimDiv: 		   
			     ; ------------------------------------------------------- 
	     add.w R13,R12   ; R15 = Xo + (S/Xo)
	     rra.w R12	     ;       -----------
	     mov.w R12,R15   ;            2
	     sub.w #15,R11   ; analisa as 15 interações
	     jn Fim          ; FIM
	     jmp CalculaRaiz ; looping de interações	
Fim	     ret             ;
2. (a) Escreva uma função em C que calcule 'x' elevado à 'N'-ésima potência, seguindo o seguinte protótipo: 

	int Potencia(int x, int N);

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. 'x' e 'n' são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida no registrador R15.

3. Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula a divisão de 'a' por 'b', onde 'a', 'b' e o valor de saída são inteiros de 16 bits. 'a' e 'b' são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida através do registrador R15.

Resposta:

CalculaDiv: mov.w #0,R12  ; Valor temporário da divisão
	    mov.w R15,R13 ; R13 é o registrador temporário utilizado nas mini-divisoes.
	    sub.w #0,R13  ; verifica a divisão por zero.
	    jz FimDiv2    ; se dividir por zero, retorna FFFF.(should never happen)
looping:    sub.w R13,R14 ; subtrai o numerador do denominador, para testar...
	    jn FimDiv     ; divisao termina quando a subtração der negativa.
	    inc.w R12     ; senão, vai incrementando o valor da divisao temporária.
	    jmp looping   ; FOR
FimDiv:     mov.w R12,R15 ; transmite o valor da divisão para R15
	    ret	    
FimDiv2:    mov.w #FFFFh, R15 ; transmite o valor "INFINITO" para R15
	    ret
//--------------------------------------------------------------------------------------------//
4. Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula o resto da divisão de 'a' por 'b', onde 'a', 'b' e o valor de saída são inteiros de 16 bits. 'a' e 'b' são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida através do registrador R15.

Resposta:

CalculaRST:  mov.w R15,R13 ; R13 é o registrador temporário utilizado nas mini-divisoes.
	     mov.w R15,R11 ; Valor do resto para quando a divisão é por zero.
	     sub.w #0,R13  ; verifica se a divisão é por zero.
	     jz FimDiv     ; se dividir por zero, o resto é o próprio R15.
looping:     mov.w R13,R11 ; resto da divisão será em R11, antes de subtrair o ultimo valor.
	     sub.w R14,R13 ; R13 = R13 - R14 subtrai o numerador do denominador, para testar...
	     jn FimDiv     ; divisao termina quando a subtração der negativa.
	     jmp looping   ; FOR
FimDiv:      mov.w R11,R15 ; transmite o valor do resto da div para R15
             ret   
--------------------------------------------------------------------------------------------
5. (a) Escreva uma função em C que indica a primalidade de uma variável inteira sem sinal, retornando o valor 1 se o número for primo, e 0, caso contrário. Siga o seguinte protótipo:

Resposta:

	int Primalidade(unsigned int x){
	    unsigned int y = 0;
	    int i;
            for(i = 1; i <= x; i++){
                if((x%i)== 0){
                    y++;
                }
            }
            if(y == 2)
                return 1;
            else
                return 0;
	}
//---------------------------------------------------------------------------------------------//

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. A variável de entrada é fornecida pelo registrador R15, e o valor de saída também.

Resposta

Primalidade: mov.w #1,R14	; R14 é o valor do índice (i = 1).
	     mov.w #0,R12	; R12 é o registrador que conta as vezes que o resto é zero.
looping:     push.w R15		; Joga o valor de R15 (Número analisado) para a pilha para usar a função #CalculaRST.
             call #CalculaRST
	     inc.w R14		; i++ 
	     cmp #0,R15		; R15, como é resultado da função CalculaRST, indica o resto da divisão de R15/R14. 
	     jne Condition	; if(R15 == 0) -> R12 ++ //indica se o resto é zero.
	     inc.w R12		;	 R12 ++ ;
Condition:   pop.w R15          ; Resgata o valor de R15, que é o número a ser analisado.
	     cmp.w R14,R15	;  COMP(R14-R15) Quando i > R15, então a análise terminou.
	     jn FIM
	     jmp looping	; FOR ...
FIM:         cmp #2,R12         ; if(R12 == 2){ 
	     jeq true		; 	R15 = 1;
	     mov.w #0,R15	; }else{
	     jmp false		;	R15 = 0;
true:	     mov.w #1,R15	;      }
false:	     ret     
//---------------------------------------------------------------------------------------------//	     

6. Escreva uma função em C que calcula o duplo fatorial de n, representado por n!!. Se n for ímpar, n!! = 1*3*5*...*n, e se n for par, n!! = 2*4*6*...*n. Por exemplo, 9!! = 1*3*5*7*9 = 945 e 10!! = 2*4*6*8*10 = 3840. Além disso, 0!! = 1!! = 1.
O protótipo da função é:
Resposta
//---------------------------------------------------------------------------------------------//
unsigned long long DuploFatorial(unsigned long long n){
    unsigned long long Result = 1;
    int i;
    for(i = n; i >= 1; i--){
        if((((n%2) == 0)&& ((i%2) == 0))||(((n%2)!= 0)&& ((i%2) != 0))){
            Result = Result*i;
        }
    }
    return Result;
}
//---------------------------------------------------------------------------------------------//
Outra opcao
//---------------------------------------------------------------------------------------------//
unsigned long long DuploFatorial(unsigned long long n)
{
	if(n < 2) return 1;
	unsigned long long retn = 1;
		for(unsigned long long i = n; i >= 2; i=i-2)
			retn *= i;
	return retn;
}
//---------------------------------------------------------------------------------------------//
7. (a) Escreva uma função em C que calcula a função exponencial da seguinte forma:
	
Considere o cálculo até o termo n = 20. O protótipo da função é double ExpTaylor(double x);
(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430, mas considere que os valores de entrada e de saída são inteiros de 16 bits. A variável de entrada é fornecida pelo registrador R15, e o valor de saída também.

8. Escreva uma sub-rotina na linguagem Assembly do MSP430 que indica se um vetor esta ordenado de forma decrescente. Por exemplo:
[5 4 3 2 1] e [90 23 20 10] estão ordenados de forma decrescente.
[1 2 3 4 5] e [1 2 3 2] não estão.
O primeiro endereço do vetor é fornecido pelo registrador R15, e o tamanho do vetor é fornecido pelo registrador R14. A saída deverá ser fornecida no registrador R15, valendo 1 quando o vetor estiver ordenado de forma decrescente, e valendo 0 em caso contrário.

9. Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula o produto escalar de dois vetores, 'a' e 'b':
	
O primeiro endereço do vetor 'a' deverá ser passado através do registrador R15, o primeiro endereço do vetor 'b' deverá ser passado através do registrador R14, e o tamanho do vetor deverá ser passado pelo registrador R13. A saída deverá ser fornecida no registrador R15.

10. (a) Escreva uma função em C que indica se um vetor é palíndromo. Por exemplo:
	[1 2 3 2 1] e [0 10 20 20 10 0] são palíndromos.
	[5 4 3 2 1] e [1 2 3 2] não são.

 int Palindromo(int vetor[], int tamanho)
{
for (int i = 0; i < tamanho >> 1; i++)
	if (vetor[i] != vetor[tamanho - i - 1]) 
		return 0;
	return 1;
}
Se o vetor for palíndromo, retorne o valor 1. Caso contrário, retorne o valor 0. O protótipo da função é:

	int Palindromo(int vetor[ ], int tamanho);

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. O endereço do vetor de entrada é dado pelo registrador R15, o tamanho do vetor é dado pelo registrador R14, e o resultado é dado pelo registrador R15.