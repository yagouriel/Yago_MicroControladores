1. Defina a função void Atraso(volatile unsigned int x); que fornece um atraso de 'x' milissegundos. Utilize o Timer_A para a contagem de tempo, e assuma que o SMCLK já foi configurado para funcionar a 1 MHz. 
Esta função poderá ser utilizada diretamente nas outras questões desta prova.


void Atraso(volatile unsigned int x)
{

	// Periodo = 1us do clock -> Timer_A++ a cada 1us
	int i = 0; // Contador
	TA0CCR0 = 1000-1;
	TA0CTL = TASSEL_2 + ID_0 + MC_1;
	
	while(i<x)
	{
		while((TA0CTL & TAIFG)==0); // Só para quando TimerA chega a 1000. Só sai do while a cada 1ms;
		TA0CTL &= ~TAIFG;
		i++;
	}

	TA0CTL=MC_0;
	
}


2. Pisque os LEDs da Launchpad numa frequência de 100 Hz.

P1DIR = LED1 + LED2;
for(;;)
{
	P1OUT ^= LED1;
	P1OUT ^= ~LED2;
	Atraso(10);
}

3. Pisque os LEDs da Launchpad numa frequência de 20 Hz.

P1DIR = LED1 + LED2;
for(;;)
{
	P1OUT ^= LED1;
	P1OUT ^= ~LED2;
	Atraso(50);
}

4. Pisque os LEDs da Launchpad numa frequência de 1 Hz.


P1DIR = LED1 + LED2;
for(;;)
{
	P1OUT ^= LED1;
	P1OUT ^= ~LED2;
	Atraso(1000);
}

5. Pisque os LEDs da Launchpad numa frequência de 0,5 Hz.

P1DIR = LED1 + LED2;
for(;;)
{
	P1OUT ^= LED1;
	P1OUT ^= ~LED2;
	Atraso(2000);
}


6. Repita as questões 2 a 5 usando a interrupção do Timer A para acender ou apagar os LEDs.

int main(void)
{
	WDTCTL = WDTPW + WDTHOLD;	// Stop WDT
	
	BCSCTL1 = CALBC1_1MHZ;		//MCLK e SMCLK @ 1MHz

	P1OUT &= ~LED1;
	P1DIR |= LED1;
	TA0CCR0 = 1000-1;
	TA0CTL = TASSEL_2 + ID_0 + MC_1 + TAIE;
	_BIS_SR(LPM0_bits+GIE);
	return 0;
}

int count = 0;
interrupt(TIMER0_A1_VECTOR) TA0_ISR(void)
{
	count++;
	if(count < 10) return;
	P1OUT ^= LED1;
	TA0CTL &= ~TAIFG;
}

7. Defina a função void paralelo_para_serial(void); que lê o byte de entrada via porta P1 e transmite os bits serialmente via pino P2.0. Comece com um bit em nivel alto, depois os bits na ordem P1.0 - P1.1 - … - P1.7 e termine com um bit em nível baixo. Considere um período de 1 ms entre os bits.
void paralelo_para_serial(void)
{
	int paralelo = P1IN & 0x0F;
	P2OUT |= 0x1;			// Inicio
	for(int j = 0; j < 8; j++)
	{
		int value = paralelo & (1 << j) == (1 << j);
		if(value)
			P2OUT |= value;
		else
			P2OUT &= value;
			
	}
	P2OUT &= 0x0;	// Fim
}

8. Faça o programa completo que lê um byte de entrada serialmente via pino P2.0 e transmite este byte via porta P1. O sinal serial começa com um bit em nivel alto, depois os bits na ordem 0-7 e termina com um bit em nível baixo. Os pinos P1.0-P1.7 deverão corresponder aos bits 0-7, respectivamente. Considere um período de 1 ms entre os bits.

9. Defina a função void ConfigPWM(volatile unsigned int freqs, volatile unsigned char ciclo_de_trabalho); para configurar e ligar o Timer_A em modo de comparação.
 Considere que o pino P1.6 já foi anteriormente configurado como saída do canal 1 de comparação do Timer_A, que somente os valores {100, 200, 300, …, 1000} Hz são válidos para a frequência, que somente os valores {0, 25, 50, 75, 100} % são válidos para o ciclo de trabalho, e que o sinal de clock SMCLK do MSP430 está operando a 1 MHz