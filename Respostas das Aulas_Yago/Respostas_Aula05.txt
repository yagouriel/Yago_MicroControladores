Data: 29/03/2017
Yago Uriel
13/0018732

Para as questões 2 a 5, considere que as variáveis 'f', 'g', 'h', 'i' e 'j' são do tipo inteiro (16 bits na arquitetura do MSP430), e que o vetor 'A[]' é do tipo inteiro. Estas variáveis estão armazenadas nos seguintes registradores:
	f: R4
	g: R5
	h: R6
	i: R7
	j: R8
	A: R9
Utilize os registradores R11, R12, R13, R14 e R15 para armazenar valores temporários.
 

1. Escreva os trechos de código assembly do MSP430 para:
	(a) Somente setar o bit menos significativo de R5.

	Resposta: bis.w #0001h, R5

	(b) Somente setar dois bits de R6: o menos significativo e o segundo menos significativo.

	Resposta: bis.w #0002h, R6

	(c) Somente zerar o terceiro bit menos significativo de R7.

	Resposta: bic.w #0003h, R5

	(d) Somente zerar o terceiro e o quarto bits menos significativo de R8.

	Resposta: bic.w #0006h, R7

	(e) Somente inverter o bit mais significativo de R9.
	
	Resposta: xor.w #1000h , R9

	(f) Inverter o nibble mais significativo de R10, e setar o nibble menos significativo de R10. 

	Resposta: xor.w #f000h, R10
		  bis.h #000fh, R10


2. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

	if(i>j) f = g+h+10;
	else f = g-h-10;

Resposta:

cmp r7, r8
jl ELSE
mov.w R5,R4
add.w R6,R4
jump EXIT
ELSE:
mov.w R5,R4
sub.w R6,R4
sub.w #10,R4
EXIT:
...

3. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

	while(save[i]!=k) i++;
Reposta:

LOOP: mov.w R7,R12
   rla R12
   add.w R10, R12
   cmp 0(R12), R9
   jeq EXIT
   inc.w R7
   jump LOOP
EXIT:
...

4. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

	for(i=0; i<100; i++) A[i] = i*2;
Resposta:

LOOP: 
mov.w #0, R7
mov.w R7,R12
cmp ,#100, 0(R12)
jge EXIT
inc.w R7
rla R12
add.w R10, R12
jump LOOP
EXIT:
...

5. "Traduza" o seguinte trecho de código em C para o assembly do MSP430:

	for(i=99; i>=0; i--) A[i] = i*2;
Resposta:

LOOP: 
mov.w #99, R7
mov.w R7,R12
cmp ,#0, 0(R12)
jge EXIT
dec.w R7
rla R12
add.w R10, R12
jump LOOP
EXIT:
...












